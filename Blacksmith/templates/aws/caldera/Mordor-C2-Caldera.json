{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters" : {
        "Owner": {
            "Description": "Enter Team or Individual Name Responsible for the Stack.",
            "Type": "String",
            "Default": "Roberto Rodriguez"
        },
        "RestrictLocation" : {
            "Description" : "The IP address range that can access the EC2 instances.",
            "Type" : "String",
            "MinLength" : "9",
            "MaxLength" : "18",
            "Default" : "0.0.0.0/0",
            "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription" : "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "VPCSubnetCidrBlock": {
            "Description": "Enter VPC CIDR Block. (i.e. 10.0.0.0/16 = 10.0.0.0-10.0.255.255 = 256 Subnets - 65534 hosts)",
            "Type": "String",
            "Default": "172.18.0.0/16",
            "MinLength": "10",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        },
        "PublicSubnetCidrBlock": {
            "Description": "Enter Public subnet CIDR Block. (i.e. 10.0.0.0/16 = 10.0.0.0-10.0.255.255 = 256 Subnets - 65534 hosts)",
            "Type": "String",
            "Default": "172.18.39.0/24",
            "MinLength": "10",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        },
        "KeyName": {
            "Description" : "Name of an existing EC2 key pair for SSH access to the EC2 instance.",
            "Type" : "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
        },
        "RTOInstanceType" : {
            "Description" : "RTO EC2 instance type.",
            "Type" : "String",
            "Default" : "t2.medium",
            "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge" ]
        },
        "RTOPrivateIP" : {
            "Description" : "Fixed private IP for the RTO server.",
            "Type" : "String",
            "Default" : "172.18.39.8",
            "AllowedPattern" : "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
        },
        "RTODefaultC2": {
            "Description" : "Default C2 to run at startup. it could be empire or caldera or covenant.",
            "Type" : "String",
            "Default" : "caldera"
        },
        "CalderaAdminName" : {
            "Description" : "Admin name for Caldera user.",
            "Type" : "String",
            "Default" : "wardog"
        },
        "CalderaAdminPassword" : {
            "Description" : "Password for Caldera admin user.",
            "Type" : "String",
            "Default" : "B3tt3r!"
        }
    },
    "Mappings" : {
        "AWSRegion2AZ" : {
            "us-east-1" : { "1" : "us-east-1b", "2" : "us-east-1c", "3" : "us-east-1d", "4" : "us-east-1e", "5" : "us-east-1f" },
            "us-west-1" : { "1" : "us-west-1b", "2" : "us-west-1c" },
            "us-west-2" : { "1" : "us-west-2a", "2" : "us-west-2b", "3" : "us-west-2c"  }
        },
        "UbuntuAWSRegionArch2AMI" : {
            "us-east-1" : { "HVM64" : "ami-064a0193585662d74" },
            "us-west-1" : { "HVM64" : "ami-056d04da775d124d7" },
            "us-west-2" : { "HVM64" : "ami-09a3d8a7177216dcf" }
        }
    },
    "Resources" : {
        "mainVpc" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "CidrBlock": {"Ref": "VPCSubnetCidrBlock"}
            }
        },
        "mainGateway" : {
            "Type" : "AWS::EC2::InternetGateway"
        },
        "mainRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "mainVpc" }
            }
        },
        "AttachGateway" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : { "Ref" : "mainVpc" },
                "InternetGatewayId" : { "Ref" : "mainGateway" }
            }
        },
        "mainRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : [ "mainGateway", "mainRouteTable" ],
            "Properties" : {
                "RouteTableId" : { "Ref" : "mainRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "mainGateway" }
            }
        },
        "PublicSubnet" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "mainVpc" },
                "CidrBlock" : { "Ref" : "PublicSubnetCidrBlock" },
                "AvailabilityZone" : { "Fn::FindInMap" : [ "AWSRegion2AZ", { "Ref" : "AWS::Region" }, "1" ] },
                "MapPublicIpOnLaunch" : "true"
            }
        },
        "PublicSubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "DependsOn": [ "PublicSubnet", "mainRouteTable" ],
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnet" },
                "RouteTableId" : { "Ref" : "mainRouteTable" }
            }
        },
        "UbuntuBaseSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable access via ports 22,443,80,8888 from your public IP, internal communications, and outbound connections to anywhere",
                "VpcId" : { "Ref" : "mainVpc" },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "22",
                        "ToPort" : "22",
                        "CidrIp" : { "Ref" : "RestrictLocation" }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "443",
                        "ToPort" : "443",
                        "CidrIp" : { "Ref" : "RestrictLocation" }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "80",
                        "ToPort" : "80",
                        "CidrIp" : { "Ref" : "RestrictLocation" }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "8888",
                        "ToPort" : "8888",
                        "CidrIp" : { "Ref" : "RestrictLocation" }
                    },
                    {
                        "IpProtocol" : "-1",
                        "FromPort" : "0",
                        "ToPort" : "0",
                        "CidrIp" : "172.18.39.0/24"
                    }
                ],
                "SecurityGroupEgress" : [
                    {
                        "IpProtocol" : "-1",
                        "FromPort" : "0",
                        "ToPort" : "0",
                        "CidrIp" : "0.0.0.0/0"
                    }
                ]
            }
        },
        "UbuntuENI" : {
            "Type" : "AWS::EC2::NetworkInterface",
            "Properties" : {
                "GroupSet": [{ "Ref" : "UbuntuBaseSecurityGroup" }],
                "SubnetId": { "Ref" : "PublicSubnet" },
                "PrivateIpAddress": { "Ref" : "RTOPrivateIP" }
            }
        },
        "RTO" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "config" : [ "00-setup", "01-install" ]
                    },
                    "00-setup" : {
                        "files" : {
                            "/etc/cfn/cfn-hup.conf" : {
                                "content" : {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                            "region=", { "Ref" : "AWS::Region" }, "\n"
                                        ]
                                    ]
                                },
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                                "content": {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "   --stack ", { "Ref" : "AWS::StackName" },
                                            "   --resource RTO ",
                                            "   --configsets config ",
                                            "   --region ", { "Ref" : "AWS::Region" }, "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                }
                            },
                            "/lib/systemd/system/cfn-hup.service": {
                                "content": {
                                    "Fn::Join" : [
                                        "",
                                        [
                                            "[Unit]\n",
                                            "Description=cfn-hup daemon\n\n",
                                            "[Service]\n",
                                            "Type=simple\n",
                                            "ExecStart=/opt/aws/bin/cfn-hup\n", 
                                            "Restart=always\n\n",
                                            "[Install]\n",
                                            "WantedBy=multi-user.target"
                                        ]
                                    ]
                                }
                            },
                            "/etc/cfn/Install-C2s.sh": {
                                "source": "https://raw.githubusercontent.com/hunters-forge/Blacksmith/master/templates/aws/mordor/cfn-files/scripts/default/Install-C2s.sh"
                            }
                        }, 
                        "commands" : {
                            "a-enable_cfn_hup" : {
                                "command" : "systemctl enable cfn-hup.service"
                            },
                            "b-start_cfn_hup" : {
                                "command" : "systemctl start cfn-hup.service"
                            }
                        },
                        "packages" : {
                            "apt" : {
                                "git" : [],
                                "moreutils" : [],
                                "docker.io" : []
                            }
                        }
                    },
                    "01-install" : {
                        "commands": {
                            "a-install-c2s": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "chmod +x /etc/cfn/Install-C2s.sh", "\n",
                                            "export CALDERA_ADMIN_NAME=", {"Ref" : "CalderaAdminName"}, "\n",
                                            "export CALDERA_ADMIN_PASSWORD=", {"Ref" : "CalderaAdminPassword"}, "\n",
                                            "cd /etc/cfn/ && ./Install-C2s.sh",
                                            " -r ", { "Ref" : "RTODefaultC2" }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties" : {
                "InstanceType" : { "Ref" : "RTOInstanceType" },
                "ImageId" : { "Fn::FindInMap" : [ "UbuntuAWSRegionArch2AMI", { "Ref" : "AWS::Region" }, "HVM64" ] },
                "KeyName" : { "Ref" : "KeyName" },
                "NetworkInterfaces" : [
                    {
                        "NetworkInterfaceId" : { "Ref" : "UbuntuENI" },
                        "DeviceIndex": "0"
                    }
                ],
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/sda1",
                        "Ebs" : {
                            "DeleteOnTermination" : "true",
                            "VolumeSize" : "50"
                        }
                    }
                ],
                "UserData" : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "", 
                            [
                                "#!/bin/bash -xe\n",
                                "apt-get update -y\n",
                                "apt-get install -y python-pip\n",
                                "apt-get install -y python-setuptools\n",
                                "mkdir -p /opt/aws/bin\n",
                                "python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "   --stack ", { "Ref" : "AWS::StackName" },
                                "   --resource RTO ",
                                "   --configsets config ",
                                "   --region ", { "Ref" : "AWS::Region" }, "\n",
                
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "   --stack ", { "Ref" : "AWS::StackName" },
                                "   --resource RTO ",
                                "   --region ", { "Ref" : "AWS::Region" }, "\n"
                            ]
                        ]
                    }
                }
            },
            "CreationPolicy" : {
                "ResourceSignal" : {
                    "Timeout" : "PT15M",
                    "Count"   : "1"
                }
            }
        }
    },
    "Outputs" : {
        "VPCId" : {
            "Description" : "VPC ID",
            "Value" :  { "Ref" : "mainVpc" },
            "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-VPCID" }}
        },
        "PublicSubnet" : {
            "Description" : "The subnet ID to use for public web servers",
            "Value" :  { "Ref" : "PublicSubnet" },
            "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-SubnetID" }}
        },
        "UbuntuBaseSecurityGroup" : {
            "Description" : "The security group ID to use for Ubuntu servers",
            "Value" :  { "Fn::GetAtt" : ["UbuntuBaseSecurityGroup", "GroupId"] },
            "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-Ubuntu-SecurityGroupID" }}
        },
        "PublicIPAddress" : {
            "Description" : "Public IP address of the new EC2 instance",
            "Value" : { "Fn::GetAtt" : [ "RTO", "PublicIp" ] }
        }
    }
}